package diagramme;

import java.util.HashMap;
import java.util.Map;

import org.aspectj.lang.reflect.MethodSignature;


public aspect Diagram {
	//Pour garder les objets en mémoire et savoir qui appelle qui
	//Garder la Source et la Cible en mémoire
	//un Integer pour connaitre la distance entre les != objets
	//Faire un traceur de diagramme qui prend appuie sur le rang
	private Map<Object, Integer> actors		= new HashMap<Object, Integer>();
	private int rank						= -1;
	private final String blanks				= "            ";
	private final String dashes				= "------------";
	private final String rightArrow			= "----------->"; //Plus tard, aura le nom de la méthode
	private final String leftArrow			= "<--return---";
	private final int size					= this.blanks.length();
	private String names					= "";
	private int callCounter					= 0;
	
	private String giveACorrectSize(String name, String c, int size) {
		String aCorrectOne = name;
		while(aCorrectOne.length() < size) {
			if((aCorrectOne.length() % 2) == 1) {
				aCorrectOne += c;
			} else {
				aCorrectOne = c + aCorrectOne + c;
			}
		}
		return aCorrectOne;
	}
	
	private void checkAddition(Object object) {
		if(!this.actors.containsKey(object)) {
			String name = "";
			this.rank++;
			this.actors.put(object, rank);
			
			if(object == null) {
				name = "Main";
			} else {
				name = object.toString();
			}
			
			name = this.giveACorrectSize(name, " ", this.size);
			this.names += name;
		}
	}
	
	
	
	//Attention on peut avoir le nom de la méthode via sa signature
	pointcut trace():
		//si je mets un en plus, j'aurais un StackOverflowError
		//call(public * *.get*(..)) ||
		//call(public * *.del*(..)) ||
		call(public * *.set*(..)) ||
		call(public * *.add*(..));
	
	
	Object around(): trace() {
		Object source 		= thisJoinPoint.getThis();
		Object target 		= thisJoinPoint.getTarget();
		MethodSignature method = (MethodSignature) thisJoinPoint.getSignature();
		String callWay 		= "";
		String returnWay 	= "";
		
		this.callCounter = (this.callCounter + 1) % 6;
		
		this.checkAddition(source);
		this.checkAddition(target);
		
		int sourceRank = actors.get(source);
		int targetRank = actors.get(target);
		
		for(int i = 0; i < this.size / 2; i++) {
			callWay += " ";
		}
		for(int i = 0; i < sourceRank; i++) {
			callWay += "|" + this.blanks;
		}
		returnWay = callWay;
		returnWay += "|" + this.leftArrow + "|";
		for(int i = sourceRank + 1; i < targetRank; i++) {
			callWay += "|" + this.dashes;
		}
		
		for(int i = sourceRank + 2; i <= targetRank; i++) {
			returnWay 	+= this.dashes + "|";
		}
		callWay += "|-" + this.giveACorrectSize(method.getName(), "-", this.size - 2) + ">|";
		
		System.out.println(callWay);
		
		if(this.callCounter == 5) System.out.println(this.names);
		
		Object ret = proceed();
		
		System.out.println(returnWay);
		return ret;
	}
}
